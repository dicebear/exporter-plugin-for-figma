import { parse, stringify } from 'svgson';

import { readNodeExportInfo } from '../utils/readNodeExportInfo';
import { writeNodeExportInfo } from '../utils/writeNodeExportInfo';
import { mapSvgsonNodes } from '../utils/mapSvgsonNodes';

export async function applyNodeExportInfo(svg: string) {
  const svgNode = mapSvgsonNodes(await parse(svg), (node) => {
    let resultNode = node;

    const nodeExportInfo = readNodeExportInfo(node);

    writeNodeExportInfo(resultNode, null);

    // For the export, clip-path must be set in Figma so that the viewport has the correct height and width.
    // At this point we no longer need the ClipPath. It is automatically generated by the avatar when it is created.
    // SVGO will later automatically remove the corresponding element from "defs".
    delete resultNode.attributes['clip-path'];

    if (nodeExportInfo.componentGroup) {
      resultNode = {
        name: '',
        type: 'text',
        value: `{{{components.${nodeExportInfo.componentGroup}}}}`,
        attributes: {},
        children: [],
      };
    }

    if (nodeExportInfo.fillColorGroup) {
      resultNode.attributes.fill = `{{colors.${nodeExportInfo.fillColorGroup}}}`;

      // Remove fills from children
      for (const child of resultNode.children) {
        mapSvgsonNodes(child, (childNode) => {
          delete childNode.attributes.fill;

          return childNode;
        });
      }
    }

    if (nodeExportInfo.strokeColorGroup) {
      resultNode.attributes.stroke = `{{colors.${nodeExportInfo.strokeColorGroup}}}`;

      // Remove strokes from children
      for (const child of resultNode.children) {
        mapSvgsonNodes(child, (childNode) => {
          delete childNode.attributes.stroke;

          return childNode;
        });
      }
    }

    if (nodeExportInfo.scale) {
      resultNode = {
        name: 'g',
        type: 'element',
        value: '',
        attributes: {
          transform: `scale(${nodeExportInfo.scale.x} ${nodeExportInfo.scale.y})`,
        },
        children: [resultNode],
      };
    }

    if (nodeExportInfo.matrix) {
      const matrix = nodeExportInfo.matrix;

      resultNode = {
        name: 'g',
        type: 'element',
        value: '',
        attributes: {
          transform: `matrix(${matrix.a} ${matrix.b} ${matrix.c} ${matrix.d} ${matrix.tx} ${matrix.ty})`,
        },
        children: [resultNode],
      };
    }

    return resultNode;
  });

  return stringify(svgNode);
}
