/**
 * Do not change this file manually! This file was generated with the "Dicebear Exporter"-Plugin for Figma.
 *
 * Plugin: https://www.figma.com/community/plugin/1005765655729342787
 {{#if fileShareUrl}}
 * File: {{{fileShareUrl}}}
 {{/if}}
 */

/*!
 * {{{title}}} ({{packageName}})
 *
 * Code licensed under MIT License.
 * Copyright (c) {{year}} Florian KÃ¶rner
{{#if isMitLicensed}}
{{#if creator}}
* Copyright (c) {{year}} {{{creator}}}
{{/if}}
{{/if}}
 *
 * Design "{{{sourceTitle}}}"{{#if creator}} by {{{creator}}}{{/if}}{{#if licenseName}} licensed under {{{licenseName}}}{{/if}}. / Remix of the original.
{{#if source}}
 * Source: {{{source}}}
{{/if}}
{{#if homepage}}
 * Homepage: {{{homepage}}}
{{/if}}
{{#if licenseUrl}}
 * License: {{{licenseUrl}}}
{{/if}}
 */

import type { StyleCreate, StyleMeta, StyleSchema } from '@dicebear/core';
import { escape } from '@dicebear/core';

import type { Options } from './types.js';
import { getComponents } from './utils/getComponents.js';
import { getColors } from './utils/getColors.js';
{{#if hasPreCreateHook}}
import { onPreCreate } from './hooks/onPreCreate.js';
{{/if}}
{{#if hasPostCreateHook}}
import { onPostCreate } from './hooks/onPostCreate.js';
{{/if}}

export const meta: StyleMeta = {
  title: '{{{sourceTitle}}}',
  {{#if creator}}
  creator: '{{{creator}}}',
  {{/if}}
  {{#if source}}
  source: '{{{source}}}',
  {{/if}}
  {{#if homepage}}
  homepage: '{{{homepage}}}',
  {{/if}}
  {{#if licenseName}}
  license: {
    name: '{{{licenseName}}}',
    {{#if licenseUrl}}
    url: '{{{licenseUrl}}}',
    {{/if}}
  },
  {{/if}}
};

export const create: StyleCreate<Options> = ({ prng, options }) => {
{{#if hasPreCreateHook}}
  onPreCreate({ prng, options });

{{/if}}
  const components = getComponents({ prng, options });
  const colors = getColors({ prng, options });

{{#if hasPostCreateHook}}
  onPostCreate({ prng, options, components, colors });

{{/if}}
  return {
    attributes: {
      viewBox: '0 0 {{size}} {{size}}',
      fill: 'none',
      'shape-rendering': '{{shapeRendering}}'
    },
    body: {{{body}}},
    extra: () => ({
      ...Object.entries(components).reduce<Record<string, string | undefined>>(
        (acc, [key, value]) => {
          acc[key] = value?.name;
          return acc;
        },
        {}
      ),
      ...colors,
    }),
  };
};

export { schema } from './schema.js';
export type { Options } from './types.js';
